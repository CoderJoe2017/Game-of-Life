console.clear();
let { Button, ButtonToolbar } = ReactBootstrap;

class Title extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    let titleClass = 'text-center heading-text-one';
    let codedByClass = 'text-center heading-text-two';
    return (
      <div>
        <h1 className={titleClass}>{this.props.title}</h1>
        <h5 className={codedByClass}>Inspired by John Conway and Andy Lindsay</h5>
      </div>
    );
  }
}
Title.propTypes = {
  title: React.PropTypes.string
}
Title.defaultProps = {
  title: "Title"
}
class GameboardControls extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    let startButtonText = "Start";
    if (this.props.running) {
      startButtonText = "Pause";
    }
    return (
      <div>
        <ButtonToolbar className="text-center">
          <div className="col-xs-6 col-sm-6 col-md-3 col-lg-3">
            <Button onClick={this.props.onClick.bind(this, 25)} className="gameboard-button" bsStyle="primary">25 x 18</Button>
          </div>
          <div className="col-xs-6 col-sm-6 col-md-3 col-lg-3">
            <Button onClick={this.props.onClick.bind(this, 50)} className="gameboard-button" bsStyle="primary">50 x 35</Button>
          </div>
          <div className="col-xs-6 col-sm-6 col-md-3 col-lg-3">
            <Button onClick={this.props.onClick.bind(this, 100)} className="gameboard-button" bsStyle="primary">100 x 70</Button>
          </div>
          <div className="col-xs-6 col-sm-6 col-md-3 col-lg-3">
            <Button onClick={this.props.onClick.bind(this, 200)} className="gameboard-button" bsStyle="primary">200 x 105</Button>
          </div>
        </ButtonToolbar>
        <ButtonToolbar className="text-center">
          <div className="col-xs-6 col-sm-6 col-md-3 col-lg-3">
            <Button onClick={this.props.pauseGame} className="gameboard-button" bsStyle="primary">{startButtonText}</Button>
          </div>
          <div className="col-xs-6 col-sm-6 col-md-3 col-lg-3">
            <Button onClick={this.props.clearGame} className="gameboard-button" bsStyle="primary">Clear</Button>
          </div>
        </ButtonToolbar>
      </div>
    );
  }
}
class GameboardFeedback extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div className="text-center col-xs-12 col-sm-12 col-md-12 col-lg-12">
        <div className="col-xs-6">
          <h5>Population: {this.props.population}</h5>
        </div>
        <div className="col-xs-6">
          <h5>Generations: {this.props.generations}</h5>
        </div>
      </div>
    );
  }
}
class Gameboard extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    let classes = "";
    const cells = _.chunk(this.props.gameboard, this.props.width);
    if (this.props.width <= 25) {
      classes = "cell twenty-five-cell";
    } else if (this.props.width <= 50) {
      classes = "cell fifty-cell";
    } else if (this.props.width <= 100) {
      classes = "cell hundred-cell";
    } else {
      classes = "cell two-hundred-cell";
    }
    return (
      <div>
        {cells.map((row, id) => (
          <p key={id}>{row.map((cell, id) => (<span onClick={this.props.onClick.bind(this, cell.id)} key={id} className={classes + ' ' + cell.myClass}></span>))}</p>
        ))}
      </div>      
    );
  }
}
let generateNeighbours = function(id, width, height) {
  let neighbourArray = [];
   if (id % width === 0) {
    if (id - 1 < 0) {
      neighbourArray.push((width * height) - 1);
    } else {
      neighbourArray.push(id - 1);
    }      
  } else if (id - (width + 1) < 0) {
    neighbourArray.push((width * height) + (id - (width + 1)));
  } else {
    neighbourArray.push(id - (width + 1));           
  }
   if (id - width < 0) {
    neighbourArray.push((width * height) + (id - width));
  } else {
    neighbourArray.push(id - width);
  }
    if ((id + 1) % width === 0) {
    if (id - ((width * 2) - 1) < 0) {
      neighbourArray.push((width * height) + (id - ((width * 2) - 1)));    
    } else {
      neighbourArray.push(id - ((width * 2) - 1));
    }
  } else if (id - (width - 1) < 0) {
    neighbourArray.push((width * height) + (id - (width - 1)));
  } else {
    neighbourArray.push(id - (width - 1));
  }
    if (id % width === 0) {
    neighbourArray.push(id + (width - 1));
  } else {
    neighbourArray.push(id - 1);
  }
    if ((id + 1) % width === 0) {
    neighbourArray.push(id - (width - 1));
  } else {
    neighbourArray.push(id + 1);
  }
    if (id % width === 0) {
    if ((id + (width * 2)) > (width * height)) {
      neighbourArray.push((id + ((width * 2) - 1)) - (width * height));
    } else {
      neighbourArray.push(id + ((width * 2) - 1));
    }
  } else if ((id + (width - 1)) >= (width * height)) {
    neighbourArray.push((id + (width - 1)) - (width * height));
  } else {
    neighbourArray.push(id + (width - 1));
  }
    if ((id + width) >= (width * height)) {
    neighbourArray.push((id + width) - (width * height));
  } else {
    neighbourArray.push(id + width);
  }
   if ((id + 1) % width === 0) {
    if ((id + (width + 1)) >= (width * height)) {
      neighbourArray.push((width * height) - (id + 1));
    } else {
      neighbourArray.push(id + 1);
    }
  } else if ((id + (width + 1)) > (width * height)) {
    neighbourArray.push((id + (width + 1)) - (width * height));
  } else {
    neighbourArray.push(id + (width + 1));
  }
    return neighbourArray;
};
class GameboardContainer extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      width: 25,
      height: 18,
      density: 0.3,
      tempo: 0.5,
      generations: 0,
      gameboard: [],
      population: 0,
      prevPopulation: 0,
      running: false
    };
  }
  componentDidMount() {
    this.generateBoard();
    this.setState({
      intervalId: setInterval(this.refreshBoard.bind(this), 500 * this.state.tempo),
      running: true
    });
  }
  changeSize(width) {
    let height = 0;
    switch(width) {
      case 25:
        height = 18;
        break; 
      case 50:
        height = 35;
        break;
      case 100:
        height = 70;
        break;
      case 200:
        height = 105;
        break;
    }
    this.state.width = width;
    this.state.height = height;
    this.state.generations = 0;
    this.generateBoard();
  }
  changeAlive(id) {
    this.state.gameboard[id].alive = !(this.state.gameboard[id].alive);
    if (this.state.gameboard[id].alive === true) {
      this.state.gameboard[id].myClass = "newborn";
    } else {
      this.state.gameboard[id].myClass = "dead";
    }
    this.forceUpdate();
  }
  pauseGame() {
    if (this.state.running) {
      clearInterval(this.state.intervalId);
    } else {
      this.setState({
        intervalId: setInterval(this.refreshBoard.bind(this), 500 * this.state.tempo)
      });
    }
    this.setState({
      running: !(this.state.running)
    });
  }
  clearGame() {
    if (this.state.running) {
      clearInterval(this.state.intervalId);
    }
    this.setState({
      running: false,
      generations: 0,
      population: 0
    });
    for (let i = 0; i < this.state.gameboard.length; i++) {
      this.state.gameboard[i].alive = false;
      this.state.gameboard[i].myClass = "dead";
      this.state.gameboard[i].nextState = false;
    }
    this.updateBoardState();
  }
  generateBoard() {
    this.state.gameboard.length = 0;
    let cell = {};
    for (let i = 0; i < (this.state.width * this.state.height); i++) {
      cell = {
        id: i,
        name: "cell" + i,
        alive: (Math.random() < this.state.density) ? true : false,
        neighbours: generateNeighbours(i, this.state.width, this.state.height),
        nextState: false,
        prevState: false
      };
      cell.myClass = (cell.alive) ? "newborn" : "dead";
      this.state.gameboard.push(cell);
    }
  }
  countLiving() {
    let liveCount = 0;
    for (let i = 0; i < this.state.gameboard.length; i++) {
      if (this.state.gameboard[i].alive) {
        liveCount = liveCount + 1;
      }
    }
    return liveCount;
  }
  countLiveNeighbours(id) {
    let liveCount = 0;
    for (let i = 0; i < 8; i++) {
      if (this.state.gameboard[this.state.gameboard[id].neighbours[i]].alive === true) {
        liveCount = liveCount + 1;
      }
    }
    return liveCount;
  }
  refreshBoard() {
    this.regenBoard();
    this.updateBoardState();
    this.setState({
      generations: this.state.generations + 1,
      population: this.countLiving()
    });
   }
  updateBoardState() {
    for (let i = 0; i < this.state.gameboard.length; i++) {
      this.state.gameboard[i].prevState = this.state.gameboard[i].alive;
      this.state.gameboard[i].alive = this.state.gameboard[i].nextState;
    }
  }
  regenBoard() {
    for (let i = 0; i < this.state.gameboard.length; i++) {
      if (this.state.gameboard[i].alive) {
        if (this.countLiveNeighbours(i) < 2) {
          this.state.gameboard[i].nextState = false;
          this.state.gameboard[i].myClass = "dead";
        } else if (this.countLiveNeighbours(i) < 4) {
          this.state.gameboard[i].nextState = true;
          this.state.gameboard[i].myClass = "alive";
        } else {
          this.state.gameboard[i].nextState = false;
          this.state.gameboard[i].myClass = "dead";
        }
      } else {
        if (this.countLiveNeighbours(i) === 3) {
          this.state.gameboard[i].nextState = true;
          this.state.gameboard[i].myClass = "newborn";
        }
      }
    }
  }
  render() {
    return (
      <div className="gameboard rounded-corners">
        <GameboardFeedback generations={this.state.generations} population={this.state.population}/>
        <Gameboard gameboard={this.state.gameboard} onClick={this.changeAlive.bind(this)} width={this.state.width}/>
        <GameboardControls onClick={this.changeSize.bind(this)} pauseGame={this.pauseGame.bind(this)} clearGame={this.clearGame.bind(this)} running={this.state.running}/>
      </div>
    );
  }
}
class App extends React.Component {
  constructor() {
    super();
  }
  render() {
    return (
      <div className="col-xs-12 col-sm-10 col-sm-offset-1 col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3">
        <Title title="The Game of Life"/>
        <GameboardContainer />
      </div>
    );
  }
}
ReactDOM.render(<App />, document.getElementById('app'));